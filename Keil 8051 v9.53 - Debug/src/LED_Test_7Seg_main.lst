C51 COMPILER V9.53.0.0   LED_TEST_7SEG_MAIN                                                01/08/2018 10:55:39 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE LED_TEST_7SEG_MAIN
OBJECT MODULE PLACED IN .\src\LED_Test_7Seg_main.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe C:\Users\pnisbet
                    -\Documents\Silabs_Workspace\LED_Test_7Seg\src\LED_Test_7Seg_main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL
                    -(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\pnisbet\Documents\Silab
                    -s_Workspace\LED_Test_7Seg\inc;C:\Users\pnisbet\Documents\Silabs_Workspace\LED_Test_7Seg\inc\config;C:/SiliconLabs/Simpli
                    -cityStudio/v4/developer/sdks/8051/v4.0.9//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/805
                    -1/v4.0.9//Device/EFM8SB1/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.9//Lib/efm8_capsense;C:/Silicon
                    -Labs/SimplicityStudio/v4/developer/sdks/8051/v4.0.9//Device/EFM8SB1/efm8_capsense/device_layer) PRINT(.\src\LED_Test_7Se
                    -g_main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\LED_Test_7Seg_main.OBJ)

line level    source

   1          //=========================================================
   2          // src/LED_Test_7Seg_main.c: generated by Hardware Configurator
   3          //
   4          // This file will be updated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          //-----------------------------------------------------------------------------
  10          // Includes
  11          //-----------------------------------------------------------------------------
  12          #include <SI_EFM8SB1_Register_Enums.h>                  // SFR declarations
  13          #include "InitDevice.h"
  14          // $[Generated Includes]
  15          #include "cslib_config.h"
  16          #include "cslib.h"
  17          // [Generated Includes]$
  18          
  19          //Defines by Peter//
  20          #define touchCounter    65// works well enough just not too sensitive 75
  21          
  22          //Function Prototypes//
  23          void number1(void);
  24          void number2(void);
  25          void number3(void);
  26          void number4(void);
  27          void number5(void);
  28          void number6(void);
  29          void number7(void);
  30          void number8(void);
  31          void number9(void);
  32          void number0(void);
  33          void numberDisplay(uint8_t countIndex);
  34          void leftLED(void);
  35          void rightLED(void);
  36          void numberProcess(int number);
  37          void numberDisplayM(uint8_t countIndex, uint8_t direction);
  38          
  39          //Global Variables by Peter//
  40          bool displayToggle = 0;
  41          bool displayChangeValid = 0;
  42          
  43          //-----------------------------------------------------------------------------
  44          // SiLabs_Startup() Routine
  45          // ----------------------------------------------------------------------------
  46          // This function is called immediately after reset, before the initialization
  47          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
  48          // useful place to disable the watchdog timer, which is enable by default
  49          // and may trigger before main() in some instances.
C51 COMPILER V9.53.0.0   LED_TEST_7SEG_MAIN                                                01/08/2018 10:55:39 PAGE 2   

  50          //-----------------------------------------------------------------------------
  51          void SiLabs_Startup(void) {
  52   1      
  53   1      // $[SiLabs Startup]
  54   1              /*
  55   1               // WDTE (Watchdog Timer Enable) = DISABLED (Disable Watchdog Timer.)
  56   1               */
  57   1              PCA0MD &= ~PCA0MD_WDTE__BMASK;
  58   1      
  59   1      // [SiLabs Startup]$
  60   1      }
  61          
  62          //Pin Definitions//
  63          SI_SBIT(LEDA, SFR_P0, 1);
  64          SI_SBIT(LEDB, SFR_P0, 2);
  65          SI_SBIT(LEDC, SFR_P0, 3);
  66          SI_SBIT(LEDD, SFR_P0, 4);
  67          SI_SBIT(LEDE, SFR_P0, 5);
  68          SI_SBIT(LEDF, SFR_P0, 6);
  69          SI_SBIT(LEDG, SFR_P0, 7);
  70          
  71          SI_SBIT(LED0, SFR_P1, 1);
  72          
  73          SI_SBIT(LEDR, SFR_P1, 2);
  74          SI_SBIT(LEDL, SFR_P0, 0);
  75          
  76          //-----------------------------------------------------------------------------
  77          // main() Routine
  78          // ----------------------------------------------------------------------------
  79          int main(void) {
  80   1              int16_t numberCount = 0;
  81   1              uint16_t pressCount = 0;
  82   1              bool pressValid = 0;
  83   1      
  84   1              // Call hardware initialization routine
  85   1              enter_DefaultMode_from_RESET();
  86   1      
  87   1              /*PCA0CPH0 = 0x02;
  88   1               PCA0CPH1 = 0x50;*/
  89   1      
  90   1              while (1) {
  91   2      // $[Generated Run-time code]
  92   2                      // -----------------------------------------------------------------------------
  93   2                      // If low power features are enabled, this will either put the device into a low
  94   2                      // power state until it is time to take another scan, or put the device into a
  95   2                      // low-power sleep mode if no touches are active
  96   2                      // -----------------------------------------------------------------------------
  97   2                      //CSLIB_lowPowerUpdate();
  98   2      
  99   2                      // -----------------------------------------------------------------------------
 100   2                      // Performs all scanning and data structure updates
 101   2                      // -----------------------------------------------------------------------------
 102   2                      CSLIB_update();
 103   2      
 104   2      // [Generated Run-time code]$
 105   2      
 106   2                      if (CSLIB_isSensorDebounceActive(0) && pressValid == 0) {
 107   3                              numberCount++;
 108   3      
 109   3                              if (numberCount > 99) {
 110   4                                      numberCount = 99;
 111   4                              }
 112   3      
C51 COMPILER V9.53.0.0   LED_TEST_7SEG_MAIN                                                01/08/2018 10:55:39 PAGE 3   

 113   3                              LED0 = 1;
 114   3                              pressValid = 1;
 115   3                              pressCount = 0;
 116   3                      } else if (CSLIB_isSensorDebounceActive(1) && pressValid == 0) {
 117   3                              numberCount--;
 118   3      
 119   3                              if (numberCount < 0) {
 120   4                                      numberCount = 0;
 121   4                              }
 122   3      
 123   3                              LED0 = 1;
 124   3                              pressValid = 1;
 125   3                              pressCount = 0;
 126   3                      } else {
 127   3                              LED0 = 0;
 128   3                              pressCount++;
 129   3      
 130   3                              if (pressCount > touchCounter) {
 131   4                                      pressCount = 0;
 132   4                                      pressValid = 0;
 133   4                              }
 134   3                      }
 135   2                      //numberCount = 9;
 136   2                      //numberDisplay(numberCount);
 137   2                      numberProcess(numberCount);
 138   2      
 139   2              }
 140   1      }
 141          
 142          void number1(void) {
 143   1              LEDA = 0;
 144   1              LEDB = 1;
 145   1              LEDC = 1;
 146   1              LEDD = 0;
 147   1              LEDE = 0;
 148   1              LEDF = 0;
 149   1              LEDG = 0;
 150   1      }
 151          
 152          void number2(void) {
 153   1              LEDA = 1;
 154   1              LEDB = 1;
 155   1              LEDC = 0;
 156   1              LEDD = 1;
 157   1              LEDE = 1;
 158   1              LEDF = 0;
 159   1              LEDG = 1;
 160   1      }
 161          
 162          void number3(void) {
 163   1              LEDA = 1;
 164   1              LEDB = 1;
 165   1              LEDC = 1;
 166   1              LEDD = 1;
 167   1              LEDE = 0;
 168   1              LEDF = 0;
 169   1              LEDG = 1;
 170   1      }
 171          
 172          void number4(void) {
 173   1              LEDA = 0;
 174   1              LEDB = 1;
 175   1              LEDC = 1;
C51 COMPILER V9.53.0.0   LED_TEST_7SEG_MAIN                                                01/08/2018 10:55:39 PAGE 4   

 176   1              LEDD = 0;
 177   1              LEDE = 0;
 178   1              LEDF = 1;
 179   1              LEDG = 1;
 180   1      }
 181          
 182          void number5(void) {
 183   1              LEDA = 1;
 184   1              LEDB = 0;
 185   1              LEDC = 1;
 186   1              LEDD = 1;
 187   1              LEDE = 0;
 188   1              LEDF = 1;
 189   1              LEDG = 1;
 190   1      }
 191          
 192          void number6(void) {
 193   1              LEDA = 1;
 194   1              LEDB = 0;
 195   1              LEDC = 1;
 196   1              LEDD = 1;
 197   1              LEDE = 1;
 198   1              LEDF = 1;
 199   1              LEDG = 1;
 200   1      }
 201          
 202          void number7(void) {
 203   1              LEDA = 1;
 204   1              LEDB = 1;
 205   1              LEDC = 1;
 206   1              LEDD = 0;
 207   1              LEDE = 0;
 208   1              LEDF = 0;
 209   1              LEDG = 0;
 210   1      }
 211          
 212          void number8(void) {
 213   1              LEDA = 1;
 214   1              LEDB = 1;
 215   1              LEDC = 1;
 216   1              LEDD = 1;
 217   1              LEDE = 1;
 218   1              LEDF = 1;
 219   1              LEDG = 1;
 220   1      }
 221          
 222          void number9(void) {
 223   1              LEDA = 1;
 224   1              LEDB = 1;
 225   1              LEDC = 1;
 226   1              LEDD = 1;
 227   1              LEDE = 0;
 228   1              LEDF = 1;
 229   1              LEDG = 1;
 230   1      }
 231          
 232          void number0(void) {
 233   1              LEDA = 1;
 234   1              LEDB = 1;
 235   1              LEDC = 1;
 236   1              LEDD = 1;
 237   1              LEDE = 1;
 238   1              LEDF = 1;
C51 COMPILER V9.53.0.0   LED_TEST_7SEG_MAIN                                                01/08/2018 10:55:39 PAGE 5   

 239   1              LEDG = 0;
 240   1      }
 241          
 242          void leftLED(void) {
 243   1              LEDR = 0;
 244   1              LEDL = 1;
 245   1              /*PCA0CPH0 = 0x00;
 246   1               PCA0CPH1 = 0xFF;*/
 247   1      }
 248          
 249          void rightLED(void) {
 250   1              LEDR = 1;
 251   1              LEDL = 0;
 252   1              /*PCA0CPH0 = 0xFF;
 253   1               PCA0CPH1 = 0x00;*/
 254   1      }
 255          
 256          /*void numberDisplay(uint8_t countIndex) {
 257           switch (countIndex) {
 258           case 1:
 259           if (displayToggle == 1) {
 260           number0();
 261           leftLED();
 262           displayChangeValid = 0;
 263           } else if (displayToggle == 0) {
 264           number1();
 265           rightLED();
 266           displayChangeValid = 0;
 267           }
 268           break;
 269           case 2:
 270           if (displayToggle == 1) {
 271           number0();
 272           leftLED();
 273           displayChangeValid = 0;
 274           } else if (displayToggle == 0) {
 275           number2();
 276           rightLED();
 277           displayChangeValid = 0;
 278           }
 279           break;
 280           case 3:
 281           if (displayToggle == 1) {
 282           number0();
 283           leftLED();
 284           displayChangeValid = 0;
 285           } else if (displayToggle == 0) {
 286           number3();
 287           rightLED();
 288           displayChangeValid = 0;
 289           }
 290           break;
 291           case 4:
 292           if (displayToggle == 1) {
 293           number0();
 294           leftLED();
 295           displayChangeValid = 0;
 296           } else if (displayToggle == 0) {
 297           number4();
 298           rightLED();
 299           displayChangeValid = 0;
 300           }
 301           break;
C51 COMPILER V9.53.0.0   LED_TEST_7SEG_MAIN                                                01/08/2018 10:55:39 PAGE 6   

 302           case 5:
 303           if (displayToggle == 1) {
 304           number0();
 305           leftLED();
 306           displayChangeValid = 0;
 307           } else if (displayToggle == 0) {
 308           number5();
 309           rightLED();
 310           displayChangeValid = 0;
 311           }
 312           break;
 313           case 6:
 314           if (displayToggle == 1) {
 315           number0();
 316           leftLED();
 317           displayChangeValid = 0;
 318           } else if (displayToggle == 0) {
 319           number6();
 320           rightLED();
 321           displayChangeValid = 0;
 322           }
 323           break;
 324           case 7:
 325           if (displayToggle == 1) {
 326           number0();
 327           leftLED();
 328           displayChangeValid = 0;
 329           } else if (displayToggle == 0) {
 330           number7();
 331           rightLED();
 332           displayChangeValid = 0;
 333           }
 334           break;
 335           case 8:
 336           if (displayToggle == 1) {
 337           number0();
 338           leftLED();
 339           displayChangeValid = 0;
 340           } else if (displayToggle == 0) {
 341           number8();
 342           rightLED();
 343           displayChangeValid = 0;
 344           }
 345           break;
 346           case 9:
 347           if (displayToggle == 1) {
 348           number0();
 349           leftLED();
 350           displayChangeValid = 0;
 351           } else if (displayToggle == 0) {
 352           number9();
 353           rightLED();
 354           displayChangeValid = 0;
 355           }
 356           break;
 357           default:
 358           if (displayToggle == 1) {
 359           number0();
 360           leftLED();
 361           displayChangeValid = 0;
 362           } else if (displayToggle == 0) {
 363           number0();
 364           rightLED();
C51 COMPILER V9.53.0.0   LED_TEST_7SEG_MAIN                                                01/08/2018 10:55:39 PAGE 7   

 365           displayChangeValid = 0;
 366           }
 367           }
 368           }*/
 369          
 370          void numberDisplayM(uint8_t countIndex, uint8_t direction) {
 371   1              switch (countIndex) {
 372   2              case 1:
 373   2                      number1();
 374   2                      if (direction == 1) {
 375   3                              leftLED();
 376   3                              displayChangeValid = 0;
 377   3                      } else if (direction == 0) {
 378   3                              rightLED();
 379   3                              displayChangeValid = 0;
 380   3                      }
 381   2                      break;
 382   2              case 2:
 383   2                      number2();
 384   2                      if (direction == 1) {
 385   3                              leftLED();
 386   3                              displayChangeValid = 0;
 387   3                      } else if (direction == 0) {
 388   3                              rightLED();
 389   3                              displayChangeValid = 0;
 390   3                      }
 391   2                      break;
 392   2              case 3:
 393   2                      number3();
 394   2                      if (direction == 1) {
 395   3                              leftLED();
 396   3                              displayChangeValid = 0;
 397   3                      } else if (direction == 0) {
 398   3                              rightLED();
 399   3                              displayChangeValid = 0;
 400   3                      }
 401   2                      break;
 402   2              case 4:
 403   2                      number4();
 404   2                      if (direction == 1) {
 405   3                              leftLED();
 406   3                              displayChangeValid = 0;
 407   3                      } else if (direction == 0) {
 408   3                              rightLED();
 409   3                              displayChangeValid = 0;
 410   3                      }
 411   2                      break;
 412   2              case 5:
 413   2                      number5();
 414   2                      if (direction == 1) {
 415   3                              leftLED();
 416   3                              displayChangeValid = 0;
 417   3                      } else if (direction == 0) {
 418   3                              rightLED();
 419   3                              displayChangeValid = 0;
 420   3                      }
 421   2                      break;
 422   2              case 6:
 423   2                      number6();
 424   2                      if (direction == 1) {
 425   3                              leftLED();
 426   3                              displayChangeValid = 0;
 427   3                      } else if (direction == 0) {
C51 COMPILER V9.53.0.0   LED_TEST_7SEG_MAIN                                                01/08/2018 10:55:39 PAGE 8   

 428   3                              rightLED();
 429   3                              displayChangeValid = 0;
 430   3                      }
 431   2                      break;
 432   2              case 7:
 433   2                      number7();
 434   2                      if (direction == 1) {
 435   3                              leftLED();
 436   3                              displayChangeValid = 0;
 437   3                      } else if (direction == 0) {
 438   3                              rightLED();
 439   3                              displayChangeValid = 0;
 440   3                      }
 441   2                      break;
 442   2              case 8:
 443   2                      number8();
 444   2                      if (direction == 1) {
 445   3                              leftLED();
 446   3                              displayChangeValid = 0;
 447   3                      } else if (direction == 0) {
 448   3                              rightLED();
 449   3                              displayChangeValid = 0;
 450   3                      }
 451   2                      break;
 452   2              case 9:
 453   2                      number9();
 454   2                      if (direction == 1) {
 455   3                              leftLED();
 456   3                              displayChangeValid = 0;
 457   3                      } else if (direction == 0) {
 458   3                              rightLED();
 459   3                              displayChangeValid = 0;
 460   3                      }
 461   2                      break;
 462   2              default:
 463   2                      number0();
 464   2                      if (direction == 1) {
 465   3                              leftLED();
 466   3                              displayChangeValid = 0;
 467   3                      } else if (direction == 0) {
 468   3                              rightLED();
 469   3                              displayChangeValid = 0;
 470   3                      }
 471   2              }
 472   1      }
 473          
 474          void numberProcess(int number) {
 475   1              int numH;
 476   1              int numL;
 477   1      
 478   1              numL = number % 10;
 479   1              numH = (number / 10);
 480   1      
 481   1              if (displayToggle == 1) {
 482   2                      numberDisplayM(numH, 1);
 483   2              } else if (displayToggle == 0) {
 484   2                      numberDisplayM(numL, 0);
 485   2              }
 486   1      }
 487          


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.53.0.0   LED_TEST_7SEG_MAIN                                                01/08/2018 10:55:39 PAGE 9   

   CODE SIZE        =    534    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2       1
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
